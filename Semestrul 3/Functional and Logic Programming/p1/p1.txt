3.
a. Define a predicate to remove from a list all repetitive elements. 
Eg.: l=[1,2,1,4,1,3,4] => l=[2,3])
b. Remove all occurrence of a maximum value from a list on integer numbers.


%member1(L:List,L:List,C:integer)
%flow(i,i,o);

% Count the occurrences of an element in a list
member1(_, [],0).
member1(X, [X|T],C) :- 
    member1(X, T,C1),  % Recursively count occurrences of X in the tail
	C is C1+1.
member1(X, [_|T], C) :-
    member1(X, T, C).  % Continue searching for X in the tail

% Removes elements that occur more than once in a list
%removeL(L:list,L:list,L:list)
%flow (i,i,o);
removeL([],_,[]).
removeL([X|T],EntireList,NewL):-
    member1(X,EntireList,Count),  % Count occurrences of X in EntireList
    Count >= 2,   
    !,
	removeL(T,EntireList,NewL).
removeL([X|T],EntireList, [X|NewL]) :-
    removeL(T,EntireList, NewL).

%max_in_list(L:list,Max:variable)
%flow (i,o);
max_in_list([X|T], Max) :-
    max_in_list(T, X, Max).

% Base case: When the list is empty, the maximum is the current Max value.
max_in_list([], Max, Max).

% If the current element (X) is greater than the current Max, update Max.
max_in_list([X|T], CurrentMax, Max) :-
    X > CurrentMax,
    max_in_list(T, X, Max).

% If the current element (X) is not greater than the current Max, continue with the current Max.
max_in_list([X|T], CurrentMax, Max) :-
    X =< CurrentMax,
    max_in_list(T, CurrentMax, Max).

%removeMax(L:list,Max:variable,L:list)
%flow (i,i,o);
removeMax([],_,[]).
removeMax([X|T],Max,NewList):-
    max_in_list([X|T],Max),
    X=Max,
    !,
	removeMax(T,Max,NewList).
removeMax([X|T],Max, [X|NewL]) :-
    removeMax(T,Max, NewL).


IOAN.DANIEL.POP@ubbcluj.ro