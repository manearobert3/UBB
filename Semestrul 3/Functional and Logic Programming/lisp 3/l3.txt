;ex 8
;Write a function to determine the number of nodes on the level k from a n-tree ;represented as follows: 
;(root list_nodes_subtree1 ... list_nodes_subtreen) 
;Eg: tree is (a (b (c)) (d) (e (f))) and k=1 => 3 node
(defun nodesAtLevelFunc (tree level current_level)
    (cond
        ((and (atom tree ) (= current_level level)) 1)
        ((atom tree) 0)
        (t (apply #'+ (mapcar #'(lambda (x) (nodesAtLevelFunc x level (+ current_level 1))) tree)))
    )
)


(defun mainFunc (tree k)
  (let ((result (nodesAtLevelFunc tree k -1)))
    (format t "Number of nodes on level ~a: ~a~%" k result)
    result))


(setq example-tree '(a (b (c)) (d) (e (f))))
(mainFunc example-tree 2)


;Model matematic:

;nodesAtLevelFunc (tree,level, currlvl) =
;{ 1, tree is atom(leaf) and currlvl=level
;{ 0, tree is atom(leaf) and currlvl != level
;{ nodesAtLevelFunc(tree1, level, currlvl+1) +nodesAtLevelFunc(tree2, level, currlvl+1)+...