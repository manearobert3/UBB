II.

% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(l2...ln, elem)
% insert(L:list, E: element, R: result list)
% (i,i,o)

insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
    insert(E, T, R).

% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k - 1)), if k > 1
% arr(L:list, K:number, R:list)
% (i,i,o)

arr([H|_], 1, [H]).
arr([_|T], K, R):-
    arr(T, K, R).
arr([H|T], K, R1):-
    K > 1,
    K1 is K - 1,
    arr(T, K1, R),
    insert(H, R, R1).

% prod(l1...ln) =
% = 1, if l is empty
% = l1 * prod(l2...ln), otherwise
% prod(l:list, p:result)
% (i, o)

prod([], 1).
prod([H|T], P) :-
	prod(T, P1),
	P is P1*H.

% generate(l1...ln, k, p) =
% = arr(l1...ln, k), if prod(arr(l1...ln, k)) = p
% generate(l:list, k:nrel, p:prod, r:result)
% (i,i,i,o)

generate(L, K, P, R) :-
	arr(L, K, R),
	prod(R, PR),
	PR =:= P.

solve(L, K, P, R) :-
	findall(C, generate(L, K, P, C), R).



