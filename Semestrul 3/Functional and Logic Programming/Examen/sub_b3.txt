I.1

(DEFUN F(L)
    (COND
        ((ATOM L) -1)
        ((> (F (CAR L)) 0) (+ (CAR L) (F (CAR L)) (F (CDR L))))
        (T (F (CDR L)))
    )
)

(DEFUN F(L)
    ((LAMBDA (V) 
    (
    (COND
        ((ATOM L) -1)
        ((> V 0) (+ (CAR L) V (F (CDR L))))
        (T (F (CDR L)))
    )
    ) (F (CAR L)))
)


I.2

f(1, 1) :-
    !.
f(K, X) :-
    K1 is K-1,
    f(K1, Y),
    Y > 1,
    !,
    K2 is K1-1,
    X is K2.
f(K, X) :-
    K1 is K-1,
    f(K1, Y),
    Y > 0.5,
    !,
    X is Y.
f(K, X) :-
    K1 is K-1,
    f(K1, Y),
    X is Y-1.



aux(K, Y, X) :-
    Y > 1,
    !,
    K1 is K-1,
    X is K1.
aux(_, Y, X) :-
    Y > 0.5,
    !,
    X is Y.
aux(_, Y, X) :-
    X is Y-1.

f(1, 1) :-
    !.
f(K, X) :-
    K1 is K-1,
    f(K1, Y),
    aux(K1, Y, X).


I.3

(DEFUN G(F L)
    (FUNCALL F L)
)
(G #'(LAMBDA (L) (G #'CDR L)) '(1 2 3))
(2 3)



I.4

p(1).
p(2).
q(1).
q(2).
r(1).
r(2).
s :-
    p(X),
    !,
    q(Y),
    r(Z),
    write(X),
    write(Y),
    write(Z),
    nl.

111
true
112
true
121
true
122
true


II.

% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(l2...ln, elem)
% insert(L:list, E: element, R: result list)
% (i,i,o)

insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
    insert(E, T, R).

% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k - 1)), if k > 1
% arr(L:list, K:number, R:list)
% (i,i,o)

arr([H|_], 1, [H]).
arr([_|T], K, R):-
    arr(T, K, R).
arr([H|T], K, R1):-
    K > 1,
    K1 is K - 1,
    arr(T, K1, R),
    insert(H, R, R1).

% prod(l1...ln) =
% = 1, if l is empty
% = l1 * prod(l2...ln), otherwise
% prod(l:list, p:result)
% (i, o)

prod([], 1).
prod([H|T], P) :-
	prod(T, P1),
	P is P1*H.

% generate(l1...ln, k, v) =
% = arr(l1...ln, k), if prod(arr(l1...ln, k)) = v
% generate(l:list, k:nrel, v:value, r:result)
% (i,i,i,o)

generate(L, K, V, R) :-
	arr(L, K, R),
	prod(R, PR),
	PR < V.

solve(L, K, V, R) :-
	findall(C, generate(L, K, V, C), R).


III.

(DEFUN F(L)
    (COND
        ((AND (NUMBERP L) (EVENP L)) (+ L 1))
        ((ATOM L) L)
        (T (MAPCAR #'F L))
    )
)
(PRINT (F '(1 s 4 (2 f (7)))))


(DEFUN F(L)
    (COND
        ((AND (NUMBERP L) (EVENP L)) (LIST (+ L 1)))
        ((ATOM L) (LIST L))
        (T (LIST (MAPCAN #'F L)))
    )
)
(PRINT (CAR (F '(1 s 4 (2 f (7))))))






